{"ast":null,"code":"var _jsxFileName = \"F:\\\\my project\\\\Vendor\\\\client\\\\src\\\\components\\\\AdminRoute.jsx\";\n// client/src/components/AdminRoute.jsx\nimport React from \"react\";\nimport { Navigate } from \"react-router-dom\";\n\n/**\r\n * Uses localStorage 'user' (stringified) OR expects AuthContext to provide user (optional).\r\n * If you want to use your AuthContext, replace the localStorage lines with your context hook.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminRoute({\n  children\n}) {\n  // Option A: use localStorage (works with typical login flow)\n  const stored = localStorage.getItem(\"user\");\n  const user = stored ? JSON.parse(stored) : null;\n\n  // Option B (if you use AuthContext): uncomment and use below\n  // import { useAuth } from \"../context/AuthContext\";\n  // const { user } = useAuth();\n\n  if (!user) return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/auth\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 21\n  }, this);\n  if (user.role !== \"admin\") return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 37\n  }, this);\n  return children;\n}\n_c = AdminRoute;\nexport default AdminRoute;\nvar _c;\n$RefreshReg$(_c, \"AdminRoute\");","map":{"version":3,"names":["React","Navigate","jsxDEV","_jsxDEV","AdminRoute","children","stored","localStorage","getItem","user","JSON","parse","to","fileName","_jsxFileName","lineNumber","columnNumber","role","_c","$RefreshReg$"],"sources":["F:/my project/Vendor/client/src/components/AdminRoute.jsx"],"sourcesContent":["// client/src/components/AdminRoute.jsx\r\nimport React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\n/**\r\n * Uses localStorage 'user' (stringified) OR expects AuthContext to provide user (optional).\r\n * If you want to use your AuthContext, replace the localStorage lines with your context hook.\r\n */\r\n\r\nfunction AdminRoute({ children }) {\r\n  // Option A: use localStorage (works with typical login flow)\r\n  const stored = localStorage.getItem(\"user\");\r\n  const user = stored ? JSON.parse(stored) : null;\r\n\r\n  // Option B (if you use AuthContext): uncomment and use below\r\n  // import { useAuth } from \"../context/AuthContext\";\r\n  // const { user } = useAuth();\r\n\r\n  if (!user) return <Navigate to=\"/auth\" />;\r\n  if (user.role !== \"admin\") return <Navigate to=\"/\" />;\r\n  return children;\r\n}\r\n\r\nexport default AdminRoute;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;;AAE3C;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAKA,SAASC,UAAUA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAChC;EACA,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAC3C,MAAMC,IAAI,GAAGH,MAAM,GAAGI,IAAI,CAACC,KAAK,CAACL,MAAM,CAAC,GAAG,IAAI;;EAE/C;EACA;EACA;;EAEA,IAAI,CAACG,IAAI,EAAE,oBAAON,OAAA,CAACF,QAAQ;IAACW,EAAE,EAAC;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EACzC,IAAIP,IAAI,CAACQ,IAAI,KAAK,OAAO,EAAE,oBAAOd,OAAA,CAACF,QAAQ;IAACW,EAAE,EAAC;EAAG;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EACrD,OAAOX,QAAQ;AACjB;AAACa,EAAA,GAZQd,UAAU;AAcnB,eAAeA,UAAU;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}